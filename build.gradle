import com.wiredforcode.gradle.spawn.KillProcessTask
import com.wiredforcode.gradle.spawn.SpawnProcessTask
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/libs-release" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.1.5.RELEASE"
        classpath 'com.wiredforcode:gradle-spawn-plugin:0.5.2'
        classpath 'org.cloudfoundry:cf-gradle-plugin:1.0.3'
    }
}


apply plugin: 'idea'
apply plugin: 'scala'
apply plugin: 'spring-boot'
apply plugin: 'spawn'
apply plugin: 'cloudfoundry'

repositories {
    jcenter()
    maven { url 'http://repo.spring.io/release' }
}

var scalaVersion = "2.11"

dependencies {
    compile "org.scala-lang:scala-library:2.11.2"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-remote-shell"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.security.oauth:spring-security-oauth2:2.0.1.RELEASE"
    testCompile "org.scalatest:scalatest_${scalaVersion}:2.2.1"
    testCompile "org.mockito:mockito-all:1.9.5"
    testCompile "junit:junit:4.11"
    testCompile "org.scalaj:scalaj-http_${scalaVersion}:0.3.16"
    testCompile "com.fasterxml.jackson.core:jackson-databind:2.4.1.2"
    testCompile "com.fasterxml.jackson.module:jackson-module-scala_${scalaVersion}:2.4.1"
    testCompile "info.cukes:cucumber-junit:1.1.8"
    testCompile "info.cukes:cucumber-scala_${scalaVersion}:1.1.8"
    testCompile "org.mongodb:casbah_${scalaVersion}:2.7.3"
}

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

sourceSets {
    functionalTest {
        scala.srcDir file('src/fun/scala')
        resources.srcDir     file('src/fun/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}

processResources {
    filter ReplaceTokens, tokens: ["application.version": project.version]
}

task startServer(type: SpawnProcessTask, dependsOn: 'assemble') {
    command "java -jar ${projectDir}/build/libs/${project.name}-${project.version}.jar"
    ready 'Started Application'
}

task stopServer(type: KillProcessTask)

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    dependsOn startServer
    finalizedBy stopServer
}

check.dependsOn functionalTest

cloudfoundry {
    file = file("${projectDir}/build/libs/${project.name}-${project.version}.jar")
    buildpack = "https://github.com/marcoVermeulen/java-buildpack"
    target = 'https://api.run.pivotal.io'
    organization = envVariableAsGlobal("CF_ORG", true)
    username = envVariableAsGlobal("CF_USERNAME", true)
    password = envVariableAsGlobal("CF_PASSWORD", true)
    space = envVariableAsGlobal("CF_SPACE", false)
    application = envVariableAsGlobal("CF_APP", false)
    domain = envVariableAsGlobal("CF_DOMAIN", true)
    host = envVariableAsGlobal("CF_HOST", false)
    uri = envVariableAsGlobal("CF_URI", false)
    env = [
            MONGO_HOST: envVariableAsGlobal("CF_MONGO_HOST", false),
            MONGO_PORT: envVariableAsGlobal("CF_MONGO_PORT", false),
            MONGO_DB_NAME: envVariableAsGlobal("CF_MONGO_DB_NAME", false),
            MONGO_USERNAME: envVariableAsGlobal("CF_MONGO_USERNAME", false),
            MONGO_PASSWORD: envVariableAsGlobal("CF_MONGO_PASSWORD", false),
            CLIENT_ID: envVariableAsGlobal("CF_CLIENT_ID", false),
            CLIENT_SECRET: envVariableAsGlobal("CF_CLIENT_SECRET", false),
            AUTH_USERNAME: envVariableAsGlobal("CF_AUTH_USERNAME", true),
            AUTH_PASSWORD: envVariableAsGlobal("CF_AUTH_PASSWORD", true)
    ]
}

def envVariableAsGlobal(String envVar, boolean global) {
    def env = global ? "" : determineEnvironment()
    System.getenv("${envVar}${env}") ?: 'invalid'
}

def determineEnvironment() {
    hasProperty("env") ? "_${env.toUpperCase()}" : '_LOCAL'
}
