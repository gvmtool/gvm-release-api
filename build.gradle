import com.wiredforcode.gradle.spawn.KillProcessTask
import com.wiredforcode.gradle.spawn.SpawnProcessTask

buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/libs-release" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.1.5.RELEASE"
        classpath 'com.wiredforcode:gradle-spawn-plugin:0.5.2'
        classpath "com.github.samueltbrown:gradle-cucumber-plugin:0.7"
        classpath 'org.cloudfoundry:cf-gradle-plugin:1.0.3'
    }
}


apply plugin: 'idea'
apply plugin: 'scala'
apply plugin: 'spring-boot'
apply plugin: 'spawn'
apply plugin: 'com.github.samueltbrown.cucumber'
apply plugin: 'cloudfoundry'

sourceCompatibility = 1.7

repositories {
    jcenter()
    maven { url 'http://repo.spring.io/release' }
}

dependencies {
    compile "org.scala-lang:scala-library:2.11.2"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-remote-shell"
    testCompile "org.scalatest:scalatest_2.11:2.2.1"
    testCompile "org.mockito:mockito-all:1.9.5"
    cucumberRuntime 'info.cukes:cucumber-jvm:1.1.8'
    cucumberRuntime 'info.cukes:cucumber-scala_2.11:1.1.8'
}

task startServer(type: SpawnProcessTask, dependsOn: 'assemble') {
    command "java -jar ${projectDir}/build/libs/${project.name}-${project.version}.jar"
    ready 'Started Application'
}

task stopServer(type: KillProcessTask)

cucumber {
    formats = ['asyougo', 'json:build/cucumber.json', 'junit:build/cucumber.xml']
    glueDirs = ['src/fun/scala', 'src/fun/steps']
    featureDirs = ['src/fun/features']
    tags = ['~@manual', '~@review']
    monochrome = false
    strict = true
    dryRun = false
}

cucumber.dependsOn startServer
cucumber.finalizedBy stopServer
check.dependsOn cucumber

cloudfoundry {
    file = file("${projectDir}/build/libs/${project.name}-${project.version}.jar")
    buildpack = "https://github.com/marcoVermeulen/java-buildpack"
    target = 'https://api.run.pivotal.io'
    organization = envVariableAsGlobal("CF_ORG", true)
    username = envVariableAsGlobal("CF_USERNAME", true)
    password = envVariableAsGlobal("CF_PASSWORD", true)
    space = envVariableAsGlobal("CF_SPACE", false)
    application = envVariableAsGlobal("CF_APP", false)
    domain = envVariableAsGlobal("CF_DOMAIN", true)
    host = envVariableAsGlobal("CF_HOST", false)
    uri = envVariableAsGlobal("CF_URI", false)
    env = [
            MONGO_HOST: envVariableAsGlobal("CF_MONGO_HOST", false),
            MONGO_PORT: envVariableAsGlobal("CF_MONGO_PORT", false),
            MONGO_DB_NAME: envVariableAsGlobal("CF_MONGO_DB_NAME", false),
            MONGO_USERNAME: envVariableAsGlobal("CF_MONGO_USERNAME", false),
            MONGO_PASSWORD: envVariableAsGlobal("CF_MONGO_PASSWORD", false),
            CLIENT_ID: envVariableAsGlobal("CF_CLIENT_ID", false),
            CLIENT_SECRET: envVariableAsGlobal("CF_CLIENT_SECRET", false),
            AUTH_USERNAME: envVariableAsGlobal("CF_AUTH_USERNAME", true),
            AUTH_PASSWORD: envVariableAsGlobal("CF_AUTH_PASSWORD", true)
    ]
}

def envVariableAsGlobal(String envVar, boolean global) {
    def env = global ? "" : determineEnvironment()
    System.getenv("${envVar}${env}") ?: 'invalid'
}

def determineEnvironment() {
    hasProperty("env") ? "_${env.toUpperCase()}" : '_LOCAL'
}
