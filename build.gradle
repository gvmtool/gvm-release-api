import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
        maven { url "http://repo.spring.io/libs-release" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.1.7.RELEASE"
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

apply plugin: 'scala'
apply plugin: 'spring-boot'
apply plugin: 'license'

repositories {
    jcenter()
    maven { url 'http://repo.spring.io/release' }
}

ext.scalaVersion = "2.11"
dependencies {
    compile "org.scala-lang:scala-library:2.11.2"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-mongodb"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-remote-shell"
    compile "org.mongodb:mongo-java-driver:3.2.2"
    testCompile "org.mockito:mockito-all:1.9.5"
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "junit:junit:4.11"
    testCompile "com.fasterxml.jackson.core:jackson-databind:2.4.1.2"
    testCompile "info.cukes:cucumber-junit:1.1.8"
    testCompile scalaLib("info.cukes:cucumber-scala:1.1.8")
    testCompile scalaLib("org.scalatest:scalatest:2.2.1")
    testCompile scalaLib("org.scalaj:scalaj-http:0.3.16")
    testCompile scalaLib("com.fasterxml.jackson.module:jackson-module-scala:2.4.1")
}

configurations {
    funTestCompile.extendsFrom testCompile
    funTestRuntime.extendsFrom testRuntime
}

sourceSets {
    funTest {
        scala.srcDir file('src/fun/scala')
        resources.srcDir     file('src/fun/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.funTestCompile
        runtimeClasspath = output + compileClasspath + configurations.funTestRuntime
    }
}

processResources {
    filter ReplaceTokens, tokens: ["application.version": project.version]
}

task funTest(type: Test) {
    testClassesDir = sourceSets.funTest.output.classesDir
    classpath = sourceSets.funTest.runtimeClasspath
}

check.dependsOn funTest

jar.archiveName = "application.jar"

license {
    header file('gradle/HEADER')
    strictCheck true
}

def scalaLib(String dep) {
    def tokens = dep.tokenize(":")
    "${tokens[0]}:${tokens[1]}_${scalaVersion}:${tokens[2]}"
}
